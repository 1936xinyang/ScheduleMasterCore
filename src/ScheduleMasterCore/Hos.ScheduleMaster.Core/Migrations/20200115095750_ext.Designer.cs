// <auto-generated />
using System;
using Hos.ScheduleMaster.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hos.ScheduleMaster.Core.Migrations
{
    [DbContext(typeof(SmDbContext))]
    [Migration("20200115095750_ext")]
    partial class ext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CronExpression")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CustomParamsJson")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool>("RunLoop")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("TotalRunCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleExecutorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WorkerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ScheduleExecutors");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleKeeperEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduleKeepers");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleLockEntity", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.ToTable("ScheduleLocks");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleReferenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleReferences");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ScheduleTraceEntity", b =>
                {
                    b.Property<Guid>("TraceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("double");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Node")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TraceId");

                    b.ToTable("ScheduleTraces");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.ServerNodeEntity", b =>
                {
                    b.Property<string>("NodeName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AccessProtocol")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AccessSecret")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MachineName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("NodeName");

                    b.ToTable("ServerNodes");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemConfigEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsReuired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("Key");

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            Key = "Email_SmtpServer",
                            CreateTime = new DateTime(2020, 1, 15, 17, 57, 50, 572, DateTimeKind.Local).AddTicks(4179),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "邮件服务器",
                            Remark = "seed by efcore auto migration",
                            Sort = 1,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_SmtpPort",
                            CreateTime = new DateTime(2020, 1, 15, 17, 57, 50, 572, DateTimeKind.Local).AddTicks(5986),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "邮件服务器端口",
                            Remark = "seed by efcore auto migration",
                            Sort = 2,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_FromAccount",
                            CreateTime = new DateTime(2020, 1, 15, 17, 57, 50, 572, DateTimeKind.Local).AddTicks(6059),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "发件人账号",
                            Remark = "seed by efcore auto migration",
                            Sort = 3,
                            Value = ""
                        },
                        new
                        {
                            Key = "Email_FromAccountPwd",
                            CreateTime = new DateTime(2020, 1, 15, 17, 57, 50, 572, DateTimeKind.Local).AddTicks(6061),
                            Group = "邮件配置",
                            IsReuired = true,
                            Name = "发件人账号密码",
                            Remark = "seed by efcore auto migration",
                            Sort = 4,
                            Value = ""
                        });
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Node")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("TraceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("Hos.ScheduleMaster.Core.Models.SystemUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SystemUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2020, 1, 15, 17, 57, 50, 562, DateTimeKind.Local).AddTicks(5886),
                            Password = "96e79218965eb72c92a549dd5a330112",
                            RealName = "admin",
                            Status = 1,
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
